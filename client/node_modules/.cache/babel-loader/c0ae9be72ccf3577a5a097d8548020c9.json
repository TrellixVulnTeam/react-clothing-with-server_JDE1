{"ast":null,"code":"import { takeEvery, put } from \"@redux-saga/core/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop.types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I'm fired!\");\n  const collectionRef = firestore.collection(\"collections\"); // dispatch(fetchCollectionsStart());\n\n  try {\n    yield collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // put(fetchCollectionsSuccess(collectionsMap));\n    });\n  } catch (error) {\n    put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/wellnaidyadrian/Visualstudio/neagoie/react/clothing-shop/src/redux/shop/shop.sagas.js"],"names":["takeEvery","put","firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","onSnapshot","snapshot","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,CAHuC,CAIrC;;AAEA,MAAI;AACF,UAAMD,aAAa,CAACE,UAAd,CAAyB,MAAOC,QAAP,IAAoB;AACjD,YAAMC,cAAc,GAAGX,+BAA+B,CAACU,QAAD,CAAtD,CADiD,CAEjD;AACD,KAHK,CAAN;AAID,GALD,CAKE,OAAOE,KAAP,EAAc;AACdd,IAAAA,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAH;AACD;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMjB,SAAS,CACbI,eAAe,CAACc,uBADH,EAEbX,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery, put } from \"@redux-saga/core/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n\nimport ShopActionTypes from \"./shop.types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I'm fired!\");\n\n  const collectionRef = firestore.collection(\"collections\");\n    // dispatch(fetchCollectionsStart());\n\n    try {\n      yield collectionRef.onSnapshot(async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        // put(fetchCollectionsSuccess(collectionsMap));\n      });\n    } catch (error) {\n      put(fetchCollectionsFailure(error.message));\n    }\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}